// Mock eksam 2020.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <string>
#include <conio.h>
#include <ctime>
#include <stdio.h>
#include <Windows.h>
void printBoard();
void reset();

void printgrid();

char grid[10][10] = {
    {'+','#','#','#','#','#','#','#','#','#'},
    {'#','X',' ','*',' ',' ',' ',' ',' ','#'},
    {'#','#','#',' ','#','#','#','#','#','#'},
    {'#','*',' ','*',' ',' ',' ',' ',' ','#'},
    {'#',' ','#',' ','#','#','#','#','#','#'},
    {'#',' ','#','E','#',' ','-',' ','#','#'},
    {'#','*','#',' ','-','-','-',' ',' ','#'},
    {'#',' ',' ',' ',' ',' ',' ',' ',' ','#'},
    {'#',' ',' ','#','#','#','#','#',' ','#'},
    {'#','#','#','#','#','#','#','#','#','#'},
};


void printPacMan();
char PacMan[10][10]{
    '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
    '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',
    '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',
    '#', ' ', '#', '#', '*', ' ', ' ', '#', ' ', '#',
    '#', ' ', ' ', 'E', '*', ' ', ' ', ' ', ' ', '#',
    '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#',
    '#', ' ', '*', ' ', ' ', ' ', ' ', '*', '*', '#',
    '#', ' ', ' ', '#', ' ', ' ', 'h', ' ', ' ', '#',
    '#', ' ', ' ', ' ', '#', '#', ' ', ' ', ' ', '#',
    '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
};


char board[3][3] = {
    '*', '2', '3',
    '4', '5', '6',
    '7', '8', '9'
};
char mark = '*';

int main()
{
    int input;
    bool quit = true;
    bool pasword = true;
  
    do {
        int k = 0;
        int down = 0;
        int up = 0;
        int right = 0;
        int left = 0;
        reset();
        std::cout << "hello";
        
        for (int i = 0; i < 4; i++) {
            system("cls");
            printBoard();
            char a = _getch();
            if (a == 's') {
                down++;
              
                board[down - up][right - left] = mark;
                Sleep(500);

            }
            else if (a == 'w') {

                up++;
               
                board[down - up][right - left] = mark;
                Sleep(500);
            }
            else if (a == 'd') {

                right++;
           
                board[down - up][right - left] = mark;
                Sleep(500);
             
            }
            else if (a == 'a') {

                left++;
                
                board[down - up][right - left] = mark;
                Sleep(500);
                
            }
            

            if (board[0][0] == board[0][1] == board[1][1] == board[1][2])
            {
                pasword = true;
            }

        }
        
       
    } while (pasword=!true);
    do {
        system("cls");
        std::cout << "Menu\n";
        std::cout << "press 1 to go to task 1 \n";
        std::cout << "press 2 to go to task 2 \n";
        std::cout << "press 3 to go to task 3 \n";
        std::cout << "press 4 to go to task 4 \n";
        std::cout << "press 5 to quit the program \n";
        std::cin >> input;
        if (input == 1) {
            std::cout << "you selected" << input;
        }
        else if  (input == 2) {
            std::cout << "you selected" << input;

        }
        else if  (input == 3) {
            char Byou = ' ';
            char You = 'E';
            int points = 0;
            int k = 0;
            int down = 0;
            int up = 0;
            int right = 0;
            int left = 0;
            int startX = 4;
            int startY = 3;

            bool h = false;




            do {


                system("cls");

                printPacMan();
                std::cout << "\n" << points;
                char a = _getch();
                if (a == 's') {
                    if (PacMan[down - up + startX + 1][right - left + startY] == '#') {

                    }
                    else if (PacMan[down - up + startX + 1][right - left + startY] == '*') {
                        points++;
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        down++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else {
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        down++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                }


                if (a == 'd') {
                    if (PacMan[down - up + startX][right - left + startY + 1] == '#') {

                    }
                    else if (PacMan[down - up + startX][right - left + startY + 1] == '*') {
                        points++;
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        right++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else {
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        right++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                }

                if (a == 'w') {
                    if (PacMan[down - up + startX - 1][right - left + startY] == '#') {

                    }
                    else if (PacMan[down - up + startX - 1][right - left + startY] == '*') {
                        points++;
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        up++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else {
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        up++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                }



                if (a == 'a') {
                    if (PacMan[down - up + startX][right - left + startY - 1] == '#') {

                    }
                    else if (PacMan[down - up + startX][right - left + startY - 1] == '*') {
                        points++;
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        left++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else {
                        PacMan[down - up + startX][right - left + startY] = Byou;
                        left++;

                        PacMan[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }


                }
                if (PacMan[7][6] == 'E') {
                    h = true;
                }

            } while (h != true);

        }
        else if  (input = 4) {
            std::cout << "you selected" << input;
            char Byou = ' ';
            char You = 'E';
            char AI = 'P';
            printgrid();

            int points = 0;
            int k = 0;

            int down = 0;
            int up = 0;
            int right = 0;
            int left = 0;


            int startX = 4;
            int startY = 3;
            int AIX = 6;
            int AIY = 5;


            bool h = false;




            do {



                system("cls");
                printgrid();
                std::cout << points * 5;

                char a = _getch();
                if (a == 's') {
                    if (grid[down - up + startX + 1][right - left + startY] == '#') {

                    }
                    else if (grid[down - up + startX + 1][right - left + startY] == '*') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        down++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else if (grid[down - up + startX + 1][right - left + startY] == '-') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        down++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else {
                        grid[down - up + startX][right - left + startY] = Byou;
                        down++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                }


                if (a == 'd') {
                    if (grid[down - up + startX][right - left + startY + 1] == '#') {

                    }
                    else if (grid[down - up + startX][right - left + startY + 1] == '*') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        right++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else if (grid[down - up + startX][right - left + startY + 1] == '-') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        right++;

                        grid[down - up + startX][right - left + startY] = You;
                    }
                    else {
                        grid[down - up + startX][right - left + startY] = Byou;
                        right++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                }

                if (a == 'w') {
                    if (grid[down - up + startX - 1][right - left + startY] == '#') {

                    }
                    else if (grid[down - up + startX - 1][right - left + startY] == '*') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        up++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else if (grid[down - up + startX - 1][right - left + startY] == '-') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        up++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else {
                        grid[down - up + startX][right - left + startY] = Byou;
                        up++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                }



                if (a == 'a') {
                    if (grid[down - up + startX][right - left + startY - 1] == '#') {

                    }
                    else if (grid[down - up + startX][right - left + startY - 1] == '*') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        left++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else if (grid[down - up + startX][right - left + startY - 1] == '-') {
                        points++;
                        grid[down - up + startX][right - left + startY] = Byou;
                        left++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }
                    else {
                        grid[down - up + startX][right - left + startY] = Byou;
                        left++;

                        grid[down - up + startX][right - left + startY] = You;
                        Sleep(100);
                    }


                }
                //--------------------------------------------------------------------------------

                int b = rand() % 4;
                if (b == 0) {
                    if (grid[down - up + AIX][right - left + AIY + 1] == '#') {

                    }

                    else if (grid[down - up - AIX][right - left + AIY + 1] == You)
                    {
                        h = true;
                    }
                    else {
                        grid[down - up + AIX][right - left + AIY] = Byou;
                        AIY++;

                        grid[down - up + AIX][right - left + AIY] = AI;
                        Sleep(100);
                    }



                }
                else if (b == 1) {
                    if (grid[down - up + AIX][right - left + AIY - 1] == '#') {

                    }

                    else if (grid[down - up - AIX][right - left + AIY - 1] == You)
                    {
                        h = true;
                    }
                    else {
                        grid[down - up + AIX][right - left + AIY] = Byou;
                        AIY--;

                        grid[down - up + AIX][right - left + AIY] = AI;
                        Sleep(100);
                    }

                }
                else if (b == 2) {
                    if (grid[down - up + AIX + 1][right - left + AIY] == '#') {

                    }
                    else if (grid[down - up - AIX + 1][right - left + AIY] == You)
                    {
                        h = true;
                    }

                    else {
                        grid[down - up + AIX][right - left + AIY] = Byou;
                        AIX++;

                        grid[down - up + AIX][right - left + AIY] = AI;
                        Sleep(100);
                    }


                }
                else if (b == 3) {
                    if (grid[down - up + AIX - 1][right - left + AIY] == '#') {

                    }
                    else if (grid[down - up + AIX - 1][right - left + AIY] == You)
                    {
                        h = true;
                    }
                    else {
                        grid[down - up + AIX][right - left + AIY] = Byou;
                        AIY--;

                        grid[down - up + AIX][right - left + AIY] = AI;
                        Sleep(100);
                    }

                }


                if (grid[1][1] != 'X') {
                    h = true;
                }



            } while (h != true);
        }


    } while (input != 5);
}




void reset() {

  for (int i = 0, k = 1; i < 3; i++) {
        for (int j = 0; j < 3; j++, k++) {
            board[i][j] == k;
            
         
        }
    }

    
}

void printBoard() {
    std::cout << " " << board[0][0] << "| " << board[0][1] << " | " << board[0][2] << "\n";
    std::cout << "------------\n";
    std::cout << " " << board[1][0] << "| " << board[1][1] << " | " << board[1][2] << "\n";
    std::cout << "------------\n";
    std::cout << " " << board[2][0] << "| " << board[2][1] << " | " << board[2][2] << "\n";
}

void printgrid() {
    for (int i = 0; i < 10; i++)
    {
        std::cout << "\n";
        for (int j = 0; j < 10; j++) {
            std::cout << " " << grid[i][j];
        }
    }

}


void printPacMan() {
    for (int i = 0; i < 10; i++)
    {
        std::cout << "\n";
        for (int j = 0; j < 10; j++) {
            std::cout << " " << PacMan[i][j];
        }
    }

}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
